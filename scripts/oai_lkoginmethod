#!/usr/bin/env bash
# Switch Codex CLI between ChatGPT subscription tokens and direct OpenAI API key usage.
# Usage: source scripts/oai_lkoginmethod <sub|api>
#   sub -> removes OPENAI_API_KEY so the CLI signs in with your ChatGPT Plus login
#   api -> exports OPENAI_API_KEY from OAI_PERSONAL_KEY (or DEFAULT_API_KEY) for API billing
# Note: this script must be *sourced* so it can mutate the current shell environment.
#
# Recommended secure storage:
#   1. Put your raw key in ~/api.txt (or similar) temporarily.
#   2. Encrypt it: gpg --symmetric --cipher-algo AES256 --output ~/.config/openai/api-key.gpg ~/api.txt
#   3. (Optional) remove the plain text file.
# The script will decrypt ~/.config/openai/api-key.gpg each time you switch to API mode.
# Tip: add `export GPG_TTY=$(tty)` to your shell profile so GPG can prompt for passphrases.

set -euo pipefail

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  echo "Error: source this script instead of executing it." >&2
  echo "Usage: source ${BASH_SOURCE[0]} <sub|api>" >&2
  exit 1
fi

usage() {
  cat >&2 <<USAGE
Usage: source ${BASH_SOURCE[0]} <sub|api>

sub  remove OPENAI_API_KEY and fall back to ChatGPT subscription tokens
api  export OPENAI_API_KEY so Codex CLI uses a paid OpenAI API account

Set OAI_PERSONAL_KEY in your shell rc file with your real API key, or
replace DEFAULT_API_KEY below. The key itself is never stored in git.
USAGE
}

# Placeholder API key. Prefer encrypted file, or set OAI_PERSONAL_KEY in your shell profile instead.
DEFAULT_API_KEY="YOUR_OPENAI_API_KEY_HERE"

use_sub() {
  unset OPENAI_API_KEY
  echo "OPENAI_API_KEY unset. Codex CLI will use ChatGPT subscription authentication." >&2
}

use_api() {
  local key_file="${OAI_KEY_FILE:-$HOME/.config/openai/api-key.gpg}"

  if [[ -n "${OAI_PERSONAL_KEY-}" ]]; then
    export OPENAI_API_KEY="$OAI_PERSONAL_KEY"
    echo "OPENAI_API_KEY exported from OAI_PERSONAL_KEY environment variable." >&2
    return
  fi

  if [[ -f "$key_file" ]]; then
    local key
    if ! key=$(gpg --quiet --for-your-eyes-only --decrypt "$key_file"); then
      echo "Error: failed to decrypt $key_file. Ensure GPG_TTY is set (e.g., export GPG_TTY=\$(tty)) and passphrase is correct." >&2
      return 1
    fi
    export OPENAI_API_KEY="$key"
    unset key
    echo "OPENAI_API_KEY exported via GPG-protected file at $key_file." >&2
    return
  fi

  if [[ "$DEFAULT_API_KEY" == "YOUR_OPENAI_API_KEY_HERE" ]]; then
    echo "Warning: configure an encrypted key file (~/.config/openai/api-key.gpg), set OAI_PERSONAL_KEY, or edit DEFAULT_API_KEY before using api mode." >&2
  fi
  export OPENAI_API_KEY="$DEFAULT_API_KEY"
  echo "OPENAI_API_KEY exported from DEFAULT_API_KEY placeholder." >&2
}

if [[ $# -ne 1 ]]; then
  usage
  return 1
fi

case "$1" in
  sub)
    use_sub
    ;;
  api)
    use_api
    ;;
  *)
    usage
    return 1
    ;;
esac
